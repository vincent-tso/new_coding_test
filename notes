### Vincent Tso

## Woven Monopoly

### Instructions

To run this mini-app, ensure that Ruby Version >=3.3 is installed.
The game is run through "main.rb", which utilises the different ruby files to generate the game logic.
Each file has been tested lightly for to ensure that the methods work.
From the new_coding_test directory, run this command to enable the mini-app: ruby main.rb

### Findings:
Peter won the first game, Charlotte won the second game.

The findings are as such:

Game 1:
Player Name: Peter, Money: $30, Position: 8
Player Name: Billy, Money: $12, Position: 0
Player Name: Charlotte, Money: $5, Position: 7
Player Name: Sweedal, Money: $0, Position: 7

Game 2:
Player Name: Peter, Money: $2, Position: 4
Player Name: Billy, Money: $18, Position: 2
Player Name: Charlotte, Money: $24, Position: 0
Player Name: Sweedal, Money: $0, Position: 8


### TODO

Implement game logic - Use MVC pattern to structure game design, enables a well-structured procedure to separate concerns from each file and maintains integrity and cohesion.

### Models

4 Players (Player model)

Player model
- name
- money
- position

Property model
- name
- price
- colour
- type
- owner

### Thoughts

Controller records Player's position and Property associated with Player(s)
Player model needs attribute to record position
Property model needs attribute to record owner or availability

How are the Player and Property associated?
Player has 0 or more Properties
Property is owned by 1 Player

### Drawbacks
Not a traditional MVC architecture strategy as controller implements view techniques itself to output response to the user.
To fix this, I would create a view structure and implement dynamic responses to express to the user the output of each game file.


